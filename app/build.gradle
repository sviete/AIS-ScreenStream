apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-parcelize"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"

def apikeyPropertiesFile = rootProject.file("ais.properties");
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    compileSdkVersion(31)
    buildToolsVersion("31.0.0")

    signingConfigs {
        debug {
            storeFile file('../ais-dom-keystore.jks')
            storePassword apikeyProperties['RELEASE_STORE_PASSWORD']
            keyAlias 'key0'
            keyPassword apikeyProperties['RELEASE_STORE_PASSWORD']
        }
        release {
            storeFile file('../ais-dom-keystore.jks')
            storePassword apikeyProperties['RELEASE_STORE_PASSWORD']
            keyAlias 'key0'
            keyPassword apikeyProperties['RELEASE_STORE_PASSWORD']
        }
    }

    defaultConfig {
        applicationId = "pl.sviete.screenstream"
        minSdkVersion(21)
        targetSdkVersion(31)
        versionCode = 30807
        versionName = "1.0.3"
        resConfigs("en", "ru", "pt-rBR", "zh-rTW", "fr-rFR", "fa", "it", "pl", "hi", "de", "sk", "es", "ar", "ja", "gl", "ca", "uk", "nl")

        vectorDrawables.useSupportLibrary = true
        signingConfig signingConfigs.release
    }

    buildTypes {
        getByName("debug") {
            applicationIdSuffix ".dev"
            minifyEnabled = false
            shrinkResources = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        getByName("release") {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")

            packagingOptions {
                exclude("DebugProbesKt.bin")
            }
        }
    }

    Properties localProps = new Properties()
    File localProperties = new File(rootProject.rootDir, "local.properties")
    if (localProperties.exists() && localProperties.isFile()) {
        localProperties.withInputStream { localProps.load(it) }
    }
    flavorDimensions("default")
    productFlavors {
        create("firebase") {
            manifestPlaceholders = ["adMobPubId": "${localProps.getProperty("ad.pubId")}"]
            buildConfigField "int", "AD_UNIT_ID_A", localProps.getProperty("ad.unitIdA", "1")
            buildConfigField "int", "AD_UNIT_ID_B", localProps.getProperty("ad.unitIdB", "2")
            buildConfigField "int", "AD_UNIT_ID_C", localProps.getProperty("ad.unitIdC", "3")
        }
        create("firebasefree") {
            manifestPlaceholders = ["adMobPubId": ""]
            firebaseCrashlytics.mappingFileUploadEnabled = false
        }
    }

    buildFeatures.viewBinding = true

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"

        firebase.java.srcDirs += "src/firebase/kotlin"
        firebaseDebug.java.srcDirs += "src/firebaseDebug/kotlin"
        firebaseRelease.java.srcDirs += "src/firebaseRelease/kotlin"

        firebasefree.java.srcDirs += "src/firebasefree/kotlin"
        firebasefreeDebug.java.srcDirs += "src/firebasefreeDebug/kotlin"
        firebasefreeRelease.java.srcDirs += "src/firebasefreeRelease/kotlin"
    }

    packagingOptions {
        exclude("META-INF/INDEX.LIST")
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

dependencies {
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")

    implementation(project(":data"))

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")

    implementation("androidx.core:core-ktx:1.7.0")
    implementation("androidx.activity:activity-ktx:1.4.0")
    implementation("androidx.fragment:fragment-ktx:1.4.0")
    implementation("androidx.appcompat:appcompat:1.4.0-rc01")
    implementation("androidx.constraintlayout:constraintlayout:2.1.1")
    implementation("androidx.recyclerview:recyclerview:1.2.1")
    implementation("com.google.android.material:material:1.4.0")
    implementation("androidx.window:window:1.0.0-beta04")

    implementation("androidx.navigation:navigation-fragment-ktx:2.4.0-beta02")
    implementation("androidx.navigation:navigation-ui-ktx:2.4.0-beta02")
    implementation("androidx.lifecycle:lifecycle-livedata:2.4.0")
    implementation("androidx.lifecycle:lifecycle-common:2.4.0")

    implementation("com.afollestad.material-dialogs:core:3.3.0")
    implementation("com.afollestad.material-dialogs:color:3.3.0")
    implementation("com.afollestad.material-dialogs:input:3.3.0")
    implementation("com.afollestad.material-dialogs:lifecycle:3.3.0")
    // Temp fix for https://github.com/afollestad/material-dialogs/issues/1825
    implementation(fileTree("libs/bottomsheets-release.aar"))
//    implementation("com.afollestad.material-dialogs:bottomsheets:3.3.0")

    implementation("io.insert-koin:koin-android:3.1.3")
    implementation("com.github.iamironz:binaryprefs:1.0.1")
    implementation("com.elvishew:xlog:1.11.0")

    firebaseImplementation("com.google.android.play:core:1.10.2")
    firebaseImplementation("com.google.android.play:core-ktx:1.8.1") {
        exclude group: "org.jetbrains.kotlin"
        exclude group: "org.jetbrains.kotlinx"
        exclude group: "androidx.fragment"
        exclude group: "androidx.core"
    }
    firebaseImplementation("com.google.firebase:firebase-analytics:20.0.0")
    firebaseImplementation("com.google.firebase:firebase-crashlytics:18.2.4")
    firebaseImplementation("com.google.android.gms:play-services-ads:20.4.0")
    firebaseImplementation("androidx.work:work-runtime:2.7.1") // Temp fix for AdMob Android 12

    debugImplementation("com.squareup.leakcanary:leakcanary-android:2.7")
}

android.applicationVariants.all {
    if (flavorName.contains("firebasefree")) {
        project.tasks.getByName("injectCrashlyticsMappingFileId" + name.capitalize()).enabled = false
        project.tasks.getByName("process" + name.capitalize() + "GoogleServices").enabled = false
    }
}
